# -*- coding: utf-8 -*-

"""
generate_manifest_file.py
~~~~~~~~~~~~~~~~~~~~~~~~~

This script takes a kneaddata read counts table (generated by kneaddata_read_count_table)
and modifies it to make it usable in the PCL generating code add_metadata_to_tsv.py

Copyright (c) 2017 Harvard School of Public Health

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
"""

import argparse

import pandas as pd


def parse_cli_arguments():
    """Parses any command-line arguments passed into this script.

    Args:
        None

    Requires:
        None

    Returns:
        argparse.ArgumentParser: argparse object containing the arguments 
            passed in by the user.
    """
    parser = argparse.ArgumentParser('Generates a read counts table usable '
                                     'by the add_metadata_to_tsv script.')
    parser.add_argument('-i', '--input-counts-table', required=True,
                        help='The input kneaddata read counts table.')
    parser.add_argument('-o', '--output-pcl-counts-table', required=True,
                        help='The add_metadata_to_tsv compliant counts table.')
    parser.add_argument('-d', '--data-type', required=True, 
                        help='The data type to generate these counts for.')
    parser.add_argument('-c', '--mapping-col', default='External ID', 
                        help='The name of the column to map read counts to ' 
                        'metadata. [DEFAULT: External ID]')                        

    return parser.parse_args()


def main(args):
    counts_df = pd.read_table(args.input_counts_table)
    counts_df.rename(columns={'Sample': args.mapping_col}, inplace=True)
    counts_df.insert(loc=1, column='data_type', value=args.data_type)

    if "raw pair2" in counts_df:
        counts_df['frac_human_reads'] = ((counts_df['trimmed pair1'] - counts_df['final pair1']) /
                                          counts_df['trimmed pair1'])

        map(lambda col: counts_df.drop(col, inplace=True, axis=1), 
            ['raw pair2', 'trimmed pair2', 'trimmed orphan2', 
            'trimmed orphan1',
            'decontaminated Homo_sapiens pair1',
            'decontaminated Homo_sapiens pair2',
            'decontaminated Homo_sapiens orphan1',
            'decontaminated Homo_sapiens orphan2',
            'final pair2',#]),
            'final orphan1',
            'final orphan2'])

        counts_df.rename(columns={'raw pair1': 'total_reads',
                          'trimmed pair1': 'trimmed_reads',
                          'final pair1': 'filtered_reads'}, inplace=True)
    else:
        counts_df['frac_human_reads'] = ((counts_df['trimmed single'] - counts_df['final single']) /
                                         counts_df['trimmed single'])

        map(lambda col: counts_df.drop(col, inplace=True, axis=1),
            ['decontaminated Homo_sapiens single', 
             'decontaminated SILVA_128_LSUParc_SSUParc_ribosomal_RNA single'])

        counts_df.rename(columns={'raw single': 'total_reads',
                                  'trimmed single': 'trimmed_reads',
                                  'final single': 'filtered_reads'}, inplace=True)

    counts_df.to_csv(args.output_pcl_counts_table, sep='\t', index=False)


if __name__ == "__main__":
    main(parse_cli_arguments())
