<<label="16s_taxonomy_setup", echo=False>>=
import os

import numpy

from biobakery_workflows import utilities

from anadama2 import PweaveDocument
from anadama2.reporters import LoggerReporter

from hmp2_workflows.utils import viz as hmp2_viz 

document = PweaveDocument()
vars = document.get_vars()

min_abundance=0.01
min_samples=10

metadata_file = vars['metadata_file']

@

<div class="tab-pane" id="tax_tab">

### Average Abundance

Stacked barplot of 15 most abundant genus in each sample. Samples in the plot were sorted on the 
genus with the highest mean abundances among samples in decreasing order.

<<label="16s_taxonomy_average", echo=False>>=
# read in the otu table data

if metadata_file:
    filtered_otu_table = os.path.join(document.data_folder, "filtered_otus.tsv")
    otu_df = pd.read_table(vars["otu_table"])
    metadata_df = pd.read_csv(metadata_file)

    valid_samples = metadata_df[metadata_df['data_type'] == "biopsy_16S"]['External ID'].tolist()
    otu_df = otu_df.filter(items=['#OTU ID'] + valid_samples + ['taxonomy'])
    otu_df.to_csv(filtered_otu_table, sep="\t", index=False)

    samples, ids, taxonomy, data = utilities.read_otu_table(filtered_otu_table)
    samples_out = open('/tmp/samples.txt', 'w')
    samples_out.write('\n'.join(samples))
else:                                                                     
    samples, ids, taxonomy, data = utilities.read_otu_table(vars["otu_table"])

# plot the top taxa by genus level, plotting the relative abundance values
max_taxa=15
# get the relative abundance values for the samples
relab_data = utilities.relative_abundance(data)
# get the taxa summarized by genus level
genus_level_taxa, genus_level_data = utilities.taxa_by_level(taxonomy, relab_data, level=5)
# get the top rows of the relative abundance data
top_taxa, top_data = utilities.top_rows(genus_level_taxa, genus_level_data, max_taxa, function="average")
# shorten the top taxa names to just the genus level for plotting
top_taxa_short_names = utilities.taxa_shorten_name(top_taxa, level=5, remove_identifier=True)
# check for duplicate genera in list
legend_size = 7
if len(top_taxa_short_names) != len(list(set(top_taxa_short_names))):
    # if duplicate names, then add family to the taxonomy
    top_taxa_short_names = [family+"."+genus for family, genus in zip(utilities.taxa_shorten_name(top_taxa, level=4),utilities.taxa_shorten_name(top_taxa, level=5))]
    # reduce legend size to fit names
    legend_size = 5

# sort the data so those with the top genera are shown first
sorted_samples, sorted_data = utilities.sort_data(top_data[0], samples)
transpose_top_data = numpy.transpose(top_data)
sorted_top_data = numpy.transpose([transpose_top_data[samples.index(sample)] for sample in sorted_samples])

document.write_table(["Sample"] + sorted_samples, top_taxa_short_names, sorted_top_data, 
                     os.path.join(document.data_folder, 'top_genera_avg_abund.tsv'))
hmp2_viz.convert_table_to_plotly_barplot_json(os.path.join(document.data_folder, 'top_genera_avg_abund.tsv'), 
                                              document.data_folder, y_label="Realtive Abundance",
                                              plot_type='stack', legend_order='normal', hide_x_axis=True)
@

<div id="tax_top15_genera_avg_abund_plotly" class="plotly" data-plot-resized="false"></div>

### Terminal Taxa

Stacked barplot of 15 most abundant terminal taxa in each sample. Terminal taxa can be defined as the 
deepest taxonomic classification found for a given sample.

<<label="16s_taxonomy_terminal", echo=False>>=
# plot the relative abundance of the top terminal taxa
# get the terminal taxa
terminal_taxa_relab, terminal_data_relab = utilities.terminal_taxa(taxonomy, relab_data)
# get the top rows of terminal taxa
top_terminal_taxa, top_terminal_data = utilities.top_rows(terminal_taxa_relab, terminal_data_relab, max_taxa, function="average")

# reduce the taxa names to just the most specific identifier
shorted_names=utilities.taxonomy_trim(top_terminal_taxa)

# sort the data with the samples with the top terminal taxa first
sorted_samples_terminal, sorted_data_terminal = utilities.sort_data(top_terminal_data[0], samples)
transpose_top_terminal_data = numpy.transpose(top_terminal_data)
sorted_top_terminal_data = numpy.transpose([transpose_top_terminal_data[samples.index(sample)] for sample in sorted_samples_terminal])

document.write_table(["Sample"] + sorted_samples_terminal, shorted_names, sorted_top_terminal_data, 
                     os.path.join(document.data_folder, 'top_terminal_genera_avg_abund.tsv'))
hmp2_viz.convert_table_to_plotly_barplot_json(os.path.join(document.data_folder, 'top_terminal_genera_avg_abund.tsv'), 
                                              document.data_folder, y_label="Relative Abundance",
                                              plot_type='stack', legend_order='normal', hide_x_axis=True)
@

<div id="terminal_tax_top15_genera_avg_abund_plotly" class="plotly" data-plot-resized="false"></div>

### Ordination

<<label="16s_taxonomy_ordination", echo=False>>=
# plot the top terminal node taxa in a PCOA
# provide data as values [0-1] organized as samples as columns and features as rows

# filter the data by min abundance and min samples
filtered_taxonomy, filtered_data = utilities.filter_taxa(terminal_taxa_relab, terminal_data_relab, min_abundance, min_samples)

caption = None
if metadata_file:
    metadata_df = pd.read_csv(metadata_file)

    ## In this case we are going to want to color things by diagnosis
    metadata_df = metadata_df[metadata_df['External ID'].isin(samples)].filter(['External ID', 'diagnosis'])
    metadata = {d['External ID']: d['diagnosis'] for d in metadata_df.to_dict(orient='records')}

    caption = document.show_pcoa(samples,filtered_taxonomy,filtered_data,"PCOA Ordination of terminal taxa using Bray-Curtis similarity", 
                                 metadata=metadata, dpi=600)
else:
    caption = document.show_pcoa(samples,filtered_taxonomy,filtered_data,"PCOA Ordination of terminal taxa using Bray-Curtis similarity")
@

For the PCoA plot, relative abundances are passed through a basic filter requiring each terminal taxa
to have at least <b><% print(min_abundance)%> %</b> abundance in at least <b><% print(min_samples) %> %</b> of all samples.

</div>
</div>
</div>