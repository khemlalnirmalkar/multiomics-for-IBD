
<<label="taxonomy_setup", echo=False>>=
import os
import math

import numpy
import pandas as pd

from biobakery_workflows import utilities, visualizations, files
from hmp2_workflows.utils import viz as hmp2_viz 

from anadama2 import PweaveDocument

document = PweaveDocument()
vars = document.get_vars()

min_abundance=0.01
min_samples=10
max_sets_heatmap=25
max_sets_barplot=15

metadata_file = vars['metadata_file']
@

<<label="species_counts", echo=False>>=
tax_profiles = vars['taxonomic_profile']

## If we have metadata here we can do a little more filtering of our taxonomic profiles
## to match what we end up with in the manuscript.
if metadata_file:
    (metadata_df, tax_profiles) = hmp2_viz.filter_taxonomic_profiles(tax_profiles,
                                                                     metadata_file, 
                                                                     document.data_folder)

samples, taxonomy, data = document.read_table(tax_profiles)
samples=[s.replace("_taxonomic_profile","") for s in samples]

species_taxonomy, species_data = utilities.filter_species(taxonomy,data)

filtered_species_taxonomy, filtered_species_data = utilities.filter_species(taxonomy,
    data, min_abundance=min_abundance, min_samples=min_samples)

def count_filtered_columns(data, min):
    data=numpy.transpose(data)
    return [len(list(filter(None,filter(lambda x: x>min,row)))) for row in data]

species_counts=count_filtered_columns(species_data, min=0)
species_counts_after_filter=count_filtered_columns(filtered_species_data, min=0)

all_species_counts=[[a,b] for a,b in zip(species_counts, species_counts_after_filter)] 

document.write_table(["Sample","Total","After filter"],samples, all_species_counts,
    files.ShotGunVis.path("species_counts", document.data_folder))

hmp2_viz.convert_table_to_datatables_json(files.ShotGunVis.path('species_counts', 
                                                                 document.data_folder),
                                          document.data_folder)

pub_species_counts_table = os.path.join('data', 
                                        files.ShotGunVis.file_info['species_counts'].keywords['names'])
@

<div class="tab-pane" id="tax_tab">

## Taxonomy

Taxonomic profiles were generated using [MetaPhlAn2](http://huttenhower.sph.harvard.edu/metaphlan2).

Species abundances are passed through a basic filter requiring each species
to have at least **<%= min_abundance %>%** abundance.

A total of **<% print(len(species_taxonomy)) %>** species were identified in **<% print(len(samples)) %>** samples. After basic filtering
**<% print(len(filtered_species_taxonomy)) %>** species remained.

### Species Count Table

<div id="tax_species_count_div">
<table id="tax_species_count_table" class="table table-striped" cellspacing="0" width="100%">
<thead>
<tr>
<th>Sample Name</th>
<th>Total</th>
<th>After Filter</th>
</tr>
</thead>
</table>
</div>

Download Species Counts Table: [species_counts_table.tsv](<%= pub_species_counts_table %>)

### Ordination

Principal coordinate analysis of variance among samples, based on Bray-Curtis dissimilarities between 
species profiles of samples. Numbers in paranthesis on each axis represent the amount of variance 
explained by that axis.

<<label="ordination", echo=False>>=
top_taxonomy, top_data = utilities.top_rows(species_taxonomy, species_data, max_sets_heatmap,
    function="average") 

pcoa_data = numpy.array(species_data)/100.0

caption = None
if metadata_file:
    ## In this case we are going to want to color things by diagnosis
    metadata_df = metadata_df[metadata_df['External ID'].isin(samples)].filter(['External ID', 'diagnosis'])
    metadata = {d['External ID']: d['diagnosis'] for d in metadata_df.to_dict(orient='records')}
    caption = document.show_pcoa(samples,species_taxonomy,pcoa_data,"Ordination of species abundances", 
                                 metadata=metadata, dpi=600)
else:
    caption = document.show_pcoa(samples,species_taxonomy,pcoa_data,"Ordination of species abundances")
@

<% print(caption) %>

### Heatmap

The top <%= max_sets_heatmap %> species based on average relative abundances are show in the heatmap.
The heatmap was generated with [Hclust2](https://bitbucket.org/nsegata/hclust2).

<<label="heatmap", echo=False>>=
utilities.change_pweave_figure_size_heatmap(False)

document.show_hclust2(samples, top_taxonomy, top_data,
                      title="Top " + str(max_sets_heatmap) + " species by average abundance",
                      label_font="6", dpi=600)
@

Hierarchical clustering of samples and species, using top <%= max_sets_heatmap %> species with highest
mean relative abundance among samples.  Abundances were log10 transformed prior to clustering, and the
"average linkage" clustering on the Euclidean distance metric was used to cluster samples.  The species
dendrogram is based on pairwise (Spearman) correlation between species.  Samples are columns and species
are rows. The color bar represents relative abundances on a log10 scale.

<<echo=False>>=
utilities.reset_pweave_figure_size()
@

### Barplot

<<label="taxonomy_plotly", echo=False >>=
def sort_data(top_data, samples, sort_by_name=False):
    # sort the top data so it is ordered with the top sample/abundance first
    if sort_by_name:
        sorted_sample_indexes=[samples.index(a) for a in document.sorted_data_numerical_or_alphabetical(samples)]
    else:
        sorted_sample_indexes=sorted(range(len(samples)),key=lambda i: top_data[0][i],reverse=True)
        
    sorted_samples=[samples[i] for i in sorted_sample_indexes]
    sorted_data=[]
    for row in top_data:
        sorted_data.append([row[i] for i in sorted_sample_indexes])
    return sorted_data, sorted_samples
        
sorted_data, sorted_samples = sort_data(top_data, samples)

# add other to the taxonomy data
# other represents the total abundance of all species not included in the top set
top_taxonomy.append("other")
other_abundances=[]
for column in numpy.transpose(sorted_data):
    other_abundances.append(100-sum(column))
sorted_data.append(other_abundances)

document.plot_stacked_barchart(sorted_data, row_labels=top_taxonomy, 
    column_labels=sorted_samples, title="Top "+str(max_sets_barplot)+" species by average abundance",
    ylabel="Relative abundance", legend_title="Species", dpi=300)
@

<div id="taxonomy_barplot"></div>

Stacked barplot of 15 most abundant species among samples. Samples in the plot were sorted on the 
species with the highest mean abundances among samples in decreasing order.

</div>