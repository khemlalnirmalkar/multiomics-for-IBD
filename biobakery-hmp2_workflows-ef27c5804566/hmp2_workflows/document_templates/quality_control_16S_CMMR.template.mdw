
<<label="qc_16S_CMMR_setup", echo=False>>=
import os
import math

import numpy
import pandas as pd

from biobakery_workflows import utilities, visualizations, files
from hmp2_workflows.utils import viz as hmp2_viz 

from anadama2 import PweaveDocument

document = PweaveDocument()
vars = document.get_vars()

eestats_rows, eestats_columns, eestats_data, overall_stats = utilities.read_eestats2(vars["eestats_table"])

# If we have a metadata file supplied we can filter down our read counts table to 
# just those samples we have used for analysis.
metadata_file = vars.get('metadata_file')
read_counts_file = vars.get('read_counts')
if metadata_file:
    filtered_out_file = read_counts_file
    metadata_df = pd.read_csv(metadata_file)
    valid_samples = metadata_df[metadata_df['data_type'] == "biopsy_16S"]['External ID'].tolist()

    counts_df = pd.read_table(read_counts_file)
    filtered_counts_df = counts_df[counts_df['SampleID'].isin([int(s) for s in valid_samples])]
    filtered_counts_df.to_csv(filtered_out_file, sep="\t", index=False)

# We can compute a number of "filtered" reads by subtracting the number of Raw Reads from the 
# sum of the Mapped and Unmapped reads (Raw - (Unmapped + Mapped))
updated_counts_file = os.path.join(document.data_folder, 'read_counts_final.tsv')
read_counts_df = pd.read_table(read_counts_file)
read_counts_df['Filtered'] = read_counts_df['Raw'] - (read_counts_df['Mapped'] + read_counts_df['Unmapped'])
read_counts_df.to_csv(updated_counts_file, sep="\t", index=False)

hmp2_viz.convert_table_to_datatables_json(updated_counts_file, document.data_folder)

# TODO: Work in Alpha and Beta diversity plots here
@

<div class="tab-pane active" id="qc_tab"> 

## Quality Control

This report section contains information about the quality control processing for all samples. These samples are run through 
quality control steps in the CMMR 16S pipeline that produce summary statistics and quality control measurements.

#### 16S Samples: Tables of Filtered Reads
<div id="qc_filtered_reads">
<table id="qc_filtered_read_counts_table" class="table table-striped" cellspacing="0" width="100%">
<caption>
    <ul class="caption-list">
        <li>**Raw**: Number of reads based on de-multiplexed, unprocessed sequencing files</li>
        <li>**Filtered**: Number of reads surviving filtering steps</li>
        <li>**Mapped**: Number of reads that mapped to any of the pipeline databases</li>
        <li>**Unmapped**: Number of reads that did not map to any of the pipeline databases</li>
    </ul>
</caption>
<thead>
<tr>
<th>Sample</th>
<th>Raw</th>
<th>Filtered</th>
<th>Mapped</th>
<th>Unmapped</th>
</tr>
</thead>
</table>
</div>

#### 16S Samples: Table of Expected Error Rate Filtered Reads
<p>The following table shows the number of surviving reads when filtering by read length and maximum 
expected error rate (maxEE). The maximum expected error rate can be defined as the maximumed expected 
number of errors in a read measured by Phred Q scores. Reads that contain a higher expected error than 
maxEE are discarded.</p>

<<label="16s_QC", echo=False>>=
document.show_table(eestats_data, eestats_rows, eestats_columns, 
    "Expected error filter by read length",font="10")
@

### 16S Samples Plots of Filtered Reads

<div>This figure shows counts of reads in three categories: <br />
    <ul>
        <li>**Raw**: Number of reads based on unprocessed sequence files</li>
        <li>**Filtered**: Number of reads that survive any QC steps</li>
        <li>**Mapped**: Number of reads that align to OTUs with known taxonomy</li>
        <li>**Unmapped**: Number of reads that do not align to any OTUs</li>
    </ul>
</div>

<<label="qc_plotly_setup", echo=False>>=
hmp2_viz.convert_table_to_plotly_barplot_json(updated_counts_file,
                                              document.data_folder,
                                              sort_on='Raw')
@

<div id="qc_filtered_16S_read_counts_plotly"></div>
</div>
